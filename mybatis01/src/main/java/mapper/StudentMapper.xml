<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace属性是名称空间，必须唯一 -->
<mapper namespace="mapper.StudentMapper">

    <!-- resultMap标签:映射实体与表
         type属性：表示实体全路径名
         id属性：为实体与表的映射取一个任意的唯一的名字
    -->
    <resultMap type="bean.Student" id="studentMap">
        <!-- id标签:映射主键属性
             result标签：映射非主键属性
             property属性:实体的属性名
             column属性：表的字段名
        -->
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="sal" column="sal"/>
    </resultMap>


<!--    在JDBC中我们通常使用?号作为占位符，而在Mybatis中，我们是使用#{}作为占位符-->
<!--    parameterType我们指定了传入参数的类型-->
<!--    #{}实际上就是调用了Student属性的get方法-->

<!--    增-->
    <insert id="add" parameterType="bean.Student">
        INSERT INTO STUDENTS (ID, NAME, SAL) VALUES (#{id},#{name},#{sal});
    </insert>

<!--    查-->
    <!--
        查询根据id
        resultMap这个属性代表是返回值类型，返回值的类型是Student，就是上面实体类型
    -->
    <select id="findById" parameterType="int" resultMap="studentMap">
        SELECT * FROM STUDENTS WHERE id = #{id};
    </select>


    <!--
        查询所有数据
        返回值类型讲道理是List<Student>的，但我们只要写集合中的类型就行了
    -->
    <select id="findAll" resultMap="studentMap">
        SELECT * FROM STUDENTS;
    </select>


    <!--根据id删除-->
    <delete id="delete" parameterType="int">
        DELETE FROM STUDENTS WHERE id=#{id};

    </delete>


    <!--更新-->
    <update id="update" parameterType="bean.Student">
        update students set name=#{name},sal=#{sal} where id=#{id};
    </update>

</mapper>
